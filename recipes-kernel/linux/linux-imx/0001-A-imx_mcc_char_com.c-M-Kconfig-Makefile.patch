From 4c59990b92116cf3e66b4ccaebb7e6c32d47faa4 Mon Sep 17 00:00:00 2001
From: Christian Panse <christian.panse@gigatronik.com>
Date: Mon, 21 Sep 2015 11:16:26 +0200
Subject: [PATCH] [A] imx_mcc_char_com.c [M] Kconfig Makefile

---
 drivers/char/imx_amp/Kconfig            |   8 +
 drivers/char/imx_amp/Makefile           |   1 +
 drivers/char/imx_amp/imx_mcc_char_com.c | 291 ++++++++++++++++++++++++++++++++
 3 files changed, 300 insertions(+)
 create mode 100644 drivers/char/imx_amp/imx_mcc_char_com.c

diff --git a/drivers/char/imx_amp/Kconfig b/drivers/char/imx_amp/Kconfig
index ecde8548..26596b8 100644
--- a/drivers/char/imx_amp/Kconfig
+++ b/drivers/char/imx_amp/Kconfig
@@ -27,4 +27,12 @@ config IMX_MCC_TTY
 	  between kernel space and user space. Say N here, if the
 	  interface is not required.
 
+config IMX_MCC_CHAR_COM
+	bool "IMX character driver for MCC Gigatronik interface"
+	depends on SOC_IMX6SX && IMX_SEMA4 && !IMX_MCC_TEST && !IMX_MCC_TTY
+	help
+	  This enables a PTY node for IMX6SX MCC, used as interface
+	  between kernel space and user space. Say N here, if the
+	  interface is not required.
+
 #end imx mcc
diff --git a/drivers/char/imx_amp/Makefile b/drivers/char/imx_amp/Makefile
index 1b14c71..4b22e22 100644
--- a/drivers/char/imx_amp/Makefile
+++ b/drivers/char/imx_amp/Makefile
@@ -5,3 +5,4 @@
 obj-$(CONFIG_IMX_SEMA4)		+= imx_sema4.o
 obj-$(CONFIG_IMX_MCC_TEST)	+= imx_mcc_test.o
 obj-$(CONFIG_IMX_MCC_TTY)	+= imx_mcc_tty.o
+obj-$(CONFIG_IMX_MCC_CHAR_COM)	+= imx_mcc_char_com.o
diff --git a/drivers/char/imx_amp/imx_mcc_char_com.c b/drivers/char/imx_amp/imx_mcc_char_com.c
new file mode 100644
index 0000000..fedae82
--- /dev/null
+++ b/drivers/char/imx_amp/imx_mcc_char_com.c
@@ -0,0 +1,291 @@
+/*
+ * imx_mcc_tty.c - tty demo driver used to test imx mcc
+ * posix tty interface.
+ *
+ * Copyright (C) 2014-2015 Freescale Semiconductor, Inc.
+ */
+
+/*
+ * The code contained herein is licensed under the GNU General Public
+ * License. You may obtain a copy of the GNU General Public License
+ * Version 2 or later at the following locations:
+ *
+ * http://www.opensource.org/licenses/gpl-license.html
+ * http://www.gnu.org/copyleft/gpl.html
+ */
+
+#include <linux/delay.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/slab.h>
+#include <linux/mcc_config_linux.h>
+#include <linux/mcc_common.h>
+#include <linux/mcc_api.h>
+#include <linux/fs.h>
+#include <asm/uaccess.h>
+
+#define  DEVICE_NAME "gtmcc"    ///< The device will appear at /dev/gtmcc using this value
+#define  CLASS_NAME  "mcc"        ///< The device class -- this is a character device driver
+
+#define  MCC_BUFFER_LEN   (MCC_ATTR_BUFFER_SIZE_IN_BYTES - 24)
+
+static int    majorNumber;                  ///< Stores the device number -- determined automatically
+static short  size_of_message;              ///< Used to remember the size of the string stored
+static int    numberOpens = 0;              ///< Counts the number of times the device is opened
+static struct class*  mccCharClass  = NULL; ///< The device-driver class struct pointer
+static struct device* mccCharDevice = NULL; ///< The device-driver device struct pointer
+
+
+enum {
+	MCC_NODE_A9 = 0,
+	MCC_NODE_M4 = 0,
+
+	MCC_A9_PORT = 1,
+	MCC_M4_PORT = 2,
+};
+
+/* mcc tty/pingpong demo */
+static MCC_ENDPOINT mcc_endpoint_a9_pingpong = {0, MCC_NODE_A9, MCC_A9_PORT};
+static MCC_ENDPOINT mcc_endpoint_m4_pingpong = {1, MCC_NODE_M4, MCC_M4_PORT};
+struct mcc_char_msg {
+	char data[MCC_BUFFER_LEN];
+};
+
+
+/* The prototype functions for the character driver -- must come before the struct definition */
+static int     mcc_chr_open(struct inode *, struct file *);
+static int     mcc_chr_close(struct inode *, struct file *);
+static ssize_t mcc_chr_read(struct file *, char *, size_t, loff_t *);
+static ssize_t mcc_chr_write(struct file *, const char *, size_t, loff_t *);
+
+static struct file_operations imxmcc_chr_ops = {
+    .open           = mcc_chr_open,
+    .release        = mcc_chr_close,
+    .write          = mcc_chr_write,
+    .read           = mcc_chr_read
+};
+
+static int mcc_chr_open(struct inode *inode, struct file *file)
+{
+    pr_info("Opened device \n\r");
+	return 0;
+}
+
+static int mcc_chr_close(struct inode *inode, struct file *file)
+{
+    pr_info("Closed device \n\r");
+    return 0;
+}
+
+static int mcc_chr_write(struct file* F, const char *buf, size_t total, loff_t *f)
+{
+	int i, count, ret = 0, space;
+	unsigned char *cbuf, *tmp;
+	MCC_MEM_SIZE num_of_received_bytes;
+	struct mcc_char_msg char_msg;
+
+	/* check if the buffer is empty */
+	if (NULL == buf) {
+		pr_err("buf shouldn't be null.\n");
+		return -ENOMEM;
+	}
+
+	count = total;
+	tmp = (unsigned char *)buf;
+
+	for (i = 0; i <= count / (MCC_BUFFER_LEN - 1); i++)
+	{
+		strlcpy(char_msg.data, tmp, count >= MCC_BUFFER_LEN ? MCC_BUFFER_LEN : count + 1);
+		if (count >= MCC_BUFFER_LEN)
+			count -= MCC_BUFFER_LEN - 1;
+
+		/* send data to M4 */
+		ret = mcc_send(&mcc_endpoint_a9_pingpong,
+				&mcc_endpoint_m4_pingpong, &char_msg,
+				sizeof(struct mcc_char_msg),
+				0xffffffff);
+
+		if (MCC_ERR_ENDPOINT == ret)
+		{
+			pr_err("no endpoint opened on the other side \n");
+		    return -EFAULT;
+		}
+
+	}
+	return total;
+}
+
+
+static int mcc_chr_read(struct file* F, char *buf, size_t count, loff_t *f)
+{
+    int ret = 0;
+    struct mcc_char_msg char_msg;
+    MCC_MEM_SIZE num_of_received_bytes;
+
+    /* read data from the remote endpoint */
+    ret = mcc_recv(&mcc_endpoint_m4_pingpong,
+                    &mcc_endpoint_a9_pingpong, &char_msg,
+                    sizeof(struct mcc_char_msg),
+                    &num_of_received_bytes, 0xffffffff);
+
+    if (MCC_SUCCESS != ret)
+    {
+        pr_err("A9 MCC receive from M4 error: %d\n", ret);
+    }
+    else
+    {
+        /* copy data to user space */
+        ret = copy_to_user(buf, &char_msg.data, strlen(char_msg.data));
+
+        if (ret == 0)
+        {
+            //pr_info("Sent %d characters to the user\n", strlen(char_msg.data));
+            /* return number of successfully sent data */
+            return strlen(char_msg.data);
+        }
+    }
+
+	return -EFAULT;
+}
+
+
+static int imx_mcc_chr_probe(struct platform_device *pdev)
+{
+	int ret;
+	MCC_INFO_STRUCT mcc_info;
+
+	// Try to dynamically allocate a major number for the device -- more difficult but worth it
+	majorNumber = register_chrdev(0, DEVICE_NAME, &imxmcc_chr_ops);
+	if (majorNumber<0)
+	{
+	    pr_err("mcc char failed to register a major number\n");
+	    return majorNumber;
+	}
+	pr_info("mcc char: registered correctly with major number %d\n", majorNumber);
+
+	// Register the device class
+	mccCharClass = class_create(THIS_MODULE, CLASS_NAME);
+	if (IS_ERR(mccCharClass))
+	{                // Check for error and clean up if there is
+	    pr_err("Failed to register device class\n");
+	    ret = PTR_ERR(mccCharClass);          // Correct way to return an error on a pointer
+	    goto error_class;
+	}
+	pr_info("mcc char: device class registered correctly\n");
+
+	// Register the device driver
+	mccCharDevice = device_create(mccCharClass, NULL, MKDEV(majorNumber, 0), NULL, DEVICE_NAME);
+	if (IS_ERR(mccCharDevice))
+	{               // Clean up if there is an error
+	    pr_err("Failed to create the device\n");
+	    ret = PTR_ERR(mccCharDevice);
+	    goto error;
+	}
+
+	pr_info("mcc char: device class created correctly\n");
+
+
+	ret = mcc_initialize(MCC_NODE_A9);
+	if (ret)
+	{
+		pr_err("failed to initialize mcc.\n");
+		ret = -ENODEV;
+		goto error;
+	}
+
+	ret = mcc_get_info(MCC_NODE_A9, &mcc_info);
+	if (ret)
+	{
+		pr_err("failed to get mcc info.\n");
+		ret = -ENODEV;
+		goto error;
+	}
+	else
+	{
+		pr_info("\nA9 mcc prepares run, MCC version is %s\n",
+				mcc_info.version_string);
+		pr_info("imx mcc tty/pingpong test begin.\n");
+	}
+
+	ret = mcc_create_endpoint(&mcc_endpoint_a9_pingpong,
+			MCC_A9_PORT);
+	if (ret)
+	{
+		pr_err("failed to create a9 mcc ep.\n");
+		ret = -ENODEV;
+		goto error;
+	}
+
+	return 0;
+
+error:
+	class_destroy(mccCharClass);           // Repeated code but the alternative is goto statements
+error_class:
+	unregister_chrdev(majorNumber, DEVICE_NAME);
+
+	return ret;
+}
+
+static int imx_mcc_chr_remove(struct platform_device *pdev)
+{
+	int ret = 0;
+
+	/* destory the mcc tty endpoint here */
+	ret = mcc_destroy_endpoint(&mcc_endpoint_a9_pingpong);
+	if (ret)
+		pr_err("failed to destory a9 mcc ep.\n");
+	else
+		pr_info("destory a9 mcc ep.\n");
+
+	device_destroy(mccCharClass, MKDEV(majorNumber, 0));     // remove the device
+	class_unregister(mccCharClass);                          // unregister the device class
+	class_destroy(mccCharClass);                             // remove the device class
+	unregister_chrdev(majorNumber, DEVICE_NAME);             // unregister the major number
+	pr_info("mcc char: Goodbye from the LKM!\n");
+
+	return ret;
+}
+
+static const struct of_device_id imx6sx_mcc_tty_ids[] = {
+	{ .compatible = "fsl,imx6sx-mcc-tty", },
+	{ /* sentinel */ }
+};
+
+static struct platform_driver imx_mcc_chr_driver = {
+	.driver = {
+		.name = "imx6sx-mcc-chardrv",
+		.owner  = THIS_MODULE,
+		.of_match_table = imx6sx_mcc_tty_ids,
+		},
+	.probe = imx_mcc_chr_probe,
+	.remove = imx_mcc_chr_remove,
+};
+
+/*!
+ * Initialise the imxmcc_chr_driver.
+ *
+ * @return  The function always returns 0.
+ */
+
+static int __init imxmcc_chr_init(void)
+{
+	if (platform_driver_register(&imx_mcc_chr_driver) != 0)
+		return -ENODEV;
+
+	printk(KERN_INFO "IMX MCC char driver module loaded\n");
+	return 0;
+}
+
+static void __exit imxmcc_chr_exit(void)
+{
+	/* Unregister the device structure */
+	platform_driver_unregister(&imx_mcc_chr_driver);
+}
+
+module_init(imxmcc_chr_init);
+module_exit(imxmcc_chr_exit);
+
+MODULE_AUTHOR("GIGATRONIK GmbH");
+MODULE_DESCRIPTION("Module for MCC communication through character device driver");
+MODULE_LICENSE("GPL");
-- 
1.9.1

